// Code generated by MockGen. DO NOT EDIT.
// Source: rooster.go
//
// Generated by this command:
//
//	mockgen -source=rooster.go -destination=mock/rooster.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/acnologla/asuraTrades/internal/core/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockRoosterRepository is a mock of RoosterRepository interface.
type MockRoosterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRoosterRepositoryMockRecorder
	isgomock struct{}
}

// MockRoosterRepositoryMockRecorder is the mock recorder for MockRoosterRepository.
type MockRoosterRepositoryMockRecorder struct {
	mock *MockRoosterRepository
}

// NewMockRoosterRepository creates a new mock instance.
func NewMockRoosterRepository(ctrl *gomock.Controller) *MockRoosterRepository {
	mock := &MockRoosterRepository{ctrl: ctrl}
	mock.recorder = &MockRoosterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoosterRepository) EXPECT() *MockRoosterRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoosterRepository) Create(ctx context.Context, rooster *domain.Rooster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rooster)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRoosterRepositoryMockRecorder) Create(ctx, rooster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoosterRepository)(nil).Create), ctx, rooster)
}

// Delete mocks base method.
func (m *MockRoosterRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoosterRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoosterRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockRoosterRepository) Get(ctx context.Context, id uuid.UUID) (*domain.Rooster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.Rooster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoosterRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRoosterRepository)(nil).Get), ctx, id)
}

// GetUserRoosterQuantityAndUserLimit mocks base method.
func (m *MockRoosterRepository) GetUserRoosterQuantityAndUserLimit(ctx context.Context, id domain.ID) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoosterQuantityAndUserLimit", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserRoosterQuantityAndUserLimit indicates an expected call of GetUserRoosterQuantityAndUserLimit.
func (mr *MockRoosterRepositoryMockRecorder) GetUserRoosterQuantityAndUserLimit(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoosterQuantityAndUserLimit", reflect.TypeOf((*MockRoosterRepository)(nil).GetUserRoosterQuantityAndUserLimit), ctx, id)
}

// GetUserRoosters mocks base method.
func (m *MockRoosterRepository) GetUserRoosters(ctx context.Context, id domain.ID) ([]*domain.Rooster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoosters", ctx, id)
	ret0, _ := ret[0].([]*domain.Rooster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoosters indicates an expected call of GetUserRoosters.
func (mr *MockRoosterRepositoryMockRecorder) GetUserRoosters(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoosters", reflect.TypeOf((*MockRoosterRepository)(nil).GetUserRoosters), ctx, id)
}
