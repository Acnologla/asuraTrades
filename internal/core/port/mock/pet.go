// Code generated by MockGen. DO NOT EDIT.
// Source: pet.go
//
// Generated by this command:
//
//	mockgen -source=pet.go -destination=mock/pet.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/acnologla/asuraTrades/internal/core/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPetRepository is a mock of PetRepository interface.
type MockPetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPetRepositoryMockRecorder
	isgomock struct{}
}

// MockPetRepositoryMockRecorder is the mock recorder for MockPetRepository.
type MockPetRepositoryMockRecorder struct {
	mock *MockPetRepository
}

// NewMockPetRepository creates a new mock instance.
func NewMockPetRepository(ctrl *gomock.Controller) *MockPetRepository {
	mock := &MockPetRepository{ctrl: ctrl}
	mock.recorder = &MockPetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetRepository) EXPECT() *MockPetRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPetRepository) Create(ctx context.Context, pet *domain.Pet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPetRepositoryMockRecorder) Create(ctx, pet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPetRepository)(nil).Create), ctx, pet)
}

// Delete mocks base method.
func (m *MockPetRepository) Delete(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPetRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPetRepository)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPetRepository) Get(ctx context.Context, id uuid.UUID) (*domain.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPetRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPetRepository)(nil).Get), ctx, id)
}

// GetUserPets mocks base method.
func (m *MockPetRepository) GetUserPets(ctx context.Context, id domain.ID) ([]*domain.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPets", ctx, id)
	ret0, _ := ret[0].([]*domain.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPets indicates an expected call of GetUserPets.
func (mr *MockPetRepositoryMockRecorder) GetUserPets(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPets", reflect.TypeOf((*MockPetRepository)(nil).GetUserPets), ctx, id)
}
