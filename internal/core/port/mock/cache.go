// Code generated by MockGen. DO NOT EDIT.
// Source: cache.go
//
// Generated by this command:
//
//	mockgen -source=cache.go -destination=mock/cache.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/acnologla/asuraTrades/internal/core/domain"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTradeCache is a mock of TradeCache interface.
type MockTradeCache struct {
	ctrl     *gomock.Controller
	recorder *MockTradeCacheMockRecorder
	isgomock struct{}
}

// MockTradeCacheMockRecorder is the mock recorder for MockTradeCache.
type MockTradeCacheMockRecorder struct {
	mock *MockTradeCache
}

// NewMockTradeCache creates a new mock instance.
func NewMockTradeCache(ctrl *gomock.Controller) *MockTradeCache {
	mock := &MockTradeCache{ctrl: ctrl}
	mock.recorder = &MockTradeCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeCache) EXPECT() *MockTradeCacheMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTradeCache) Delete(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTradeCacheMockRecorder) Delete(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTradeCache)(nil).Delete), id)
}

// Get mocks base method.
func (m *MockTradeCache) Get(id uuid.UUID) (*domain.Trade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id)
	ret0, _ := ret[0].(*domain.Trade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTradeCacheMockRecorder) Get(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTradeCache)(nil).Get), id)
}

// Set mocks base method.
func (m *MockTradeCache) Set(id uuid.UUID, trade *domain.Trade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", id, trade)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTradeCacheMockRecorder) Set(id, trade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTradeCache)(nil).Set), id, trade)
}

// Update mocks base method.
func (m *MockTradeCache) Update(id uuid.UUID, trade *domain.Trade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, trade)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTradeCacheMockRecorder) Update(id, trade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTradeCache)(nil).Update), id, trade)
}
