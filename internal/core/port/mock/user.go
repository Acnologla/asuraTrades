// Code generated by MockGen. DO NOT EDIT.
// Source: user.go
//
// Generated by this command:
//
//	mockgen -source=user.go -destination=mock/user.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/acnologla/asuraTrades/internal/core/domain"
	port "github.com/acnologla/asuraTrades/internal/core/port"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUserRepository) Get(ctx context.Context, id domain.ID) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUserRepositoryMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepository)(nil).Get), ctx, id)
}

// MockTradeTxProvider is a mock of TradeTxProvider interface.
type MockTradeTxProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTradeTxProviderMockRecorder
	isgomock struct{}
}

// MockTradeTxProviderMockRecorder is the mock recorder for MockTradeTxProvider.
type MockTradeTxProviderMockRecorder struct {
	mock *MockTradeTxProvider
}

// NewMockTradeTxProvider creates a new mock instance.
func NewMockTradeTxProvider(ctrl *gomock.Controller) *MockTradeTxProvider {
	mock := &MockTradeTxProvider{ctrl: ctrl}
	mock.recorder = &MockTradeTxProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeTxProvider) EXPECT() *MockTradeTxProviderMockRecorder {
	return m.recorder
}

// Transact mocks base method.
func (m *MockTradeTxProvider) Transact(ctx context.Context, txFunc func(port.UserTradeTxAdapters, func(domain.ID) error) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transact", ctx, txFunc)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transact indicates an expected call of Transact.
func (mr *MockTradeTxProviderMockRecorder) Transact(ctx, txFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transact", reflect.TypeOf((*MockTradeTxProvider)(nil).Transact), ctx, txFunc)
}
